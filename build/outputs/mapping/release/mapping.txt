be.ppareit.swiftp.Defaults -> be.ppareit.swiftp.a:
    int inputBufferSize -> a
    int dataChunkSize -> b
    int getInputBufferSize() -> a
    int getDataChunkSize() -> b
be.ppareit.swiftp.FsApp -> be.ppareit.swiftp.b:
    java.lang.String TAG -> a
    android.content.Context sContext -> b
    void onCreate() -> onCreate
    android.content.Context getAppContext() -> a
    boolean isFreeVersion() -> b
    java.lang.String getVersion() -> c
be.ppareit.swiftp.FsService -> be.ppareit.swiftp.FsService:
    java.lang.String TAG -> d
    java.lang.Thread serverThread -> a
    boolean shouldExit -> b
    java.net.ServerSocket listenSocket -> c
    be.ppareit.swiftp.server.TcpListener wifiListener -> e
    java.util.List sessionThreads -> f
    android.os.PowerManager$WakeLock wakeLock -> g
    android.net.wifi.WifiManager$WifiLock wifiLock -> h
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    boolean isRunning() -> a
    void onDestroy() -> onDestroy
    void setupListener() -> b
    void run() -> run
    void terminateAllSessions() -> f
    void takeWakeLock() -> g
    void takeWifiLock() -> h
    java.net.InetAddress getLocalInetAddress() -> c
    boolean isConnectedToLocalNetwork() -> d
    boolean isConnectedUsingWifi() -> e
    void writeMonitor(boolean,java.lang.String) -> a
    void registerSessionThread(be.ppareit.swiftp.server.SessionThread) -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onTaskRemoved(android.content.Intent) -> onTaskRemoved
be.ppareit.swiftp.FsSettings -> be.ppareit.swiftp.c:
    java.lang.String TAG -> f
    int inputBufferSize -> a
    boolean allowOverwrite -> b
    int dataChunkSize -> c
    int sessionMonitorScrollBack -> d
    int serverLogScrollBack -> e
    java.lang.String getUserName() -> a
    java.lang.String getPassWord() -> b
    boolean allowAnoymous() -> c
    java.io.File getChrootDir() -> d
    int getPortNumber() -> e
    boolean shouldTakeFullWakeLock() -> f
    android.content.SharedPreferences getSharedPreferences() -> g
be.ppareit.swiftp.MediaUpdater -> be.ppareit.swiftp.d:
    be.ppareit.swiftp.MediaUpdater INSTANCE -> a
    java.lang.String TAG -> b
    java.util.Timer sTimer -> c
    be.ppareit.swiftp.MediaUpdater[] $VALUES -> d
    be.ppareit.swiftp.MediaUpdater[] values() -> values
    be.ppareit.swiftp.MediaUpdater valueOf(java.lang.String) -> valueOf
    void notifyFileCreated(java.lang.String) -> a
    void notifyFileDeleted(java.lang.String) -> b
    java.lang.String access$000() -> a
be.ppareit.swiftp.MediaUpdater$1 -> be.ppareit.swiftp.e:
    void run() -> run
be.ppareit.swiftp.MediaUpdater$ScanCompletedListener -> be.ppareit.swiftp.f:
    void onScanCompleted(java.lang.String,android.net.Uri) -> onScanCompleted
be.ppareit.swiftp.NsdService -> be.ppareit.swiftp.NsdService:
    java.lang.String TAG -> a
    android.net.nsd.NsdManager mNsdManager -> b
    boolean running -> c
    android.net.nsd.NsdManager$RegistrationListener mRegistrationListener -> d
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onDestroy() -> onDestroy
    android.os.IBinder onBind(android.content.Intent) -> onBind
    java.lang.String access$000() -> a
    android.net.nsd.NsdManager access$102(be.ppareit.swiftp.NsdService,android.net.nsd.NsdManager) -> a
    android.net.nsd.NsdManager access$100(be.ppareit.swiftp.NsdService) -> a
    boolean access$200(be.ppareit.swiftp.NsdService) -> b
    android.net.nsd.NsdManager$RegistrationListener access$300(be.ppareit.swiftp.NsdService) -> c
be.ppareit.swiftp.NsdService$1 -> be.ppareit.swiftp.g:
    be.ppareit.swiftp.NsdService this$0 -> a
    void onServiceRegistered(android.net.nsd.NsdServiceInfo) -> onServiceRegistered
    void onServiceUnregistered(android.net.nsd.NsdServiceInfo) -> onServiceUnregistered
    void onRegistrationFailed(android.net.nsd.NsdServiceInfo,int) -> onRegistrationFailed
    void onUnregistrationFailed(android.net.nsd.NsdServiceInfo,int) -> onUnregistrationFailed
be.ppareit.swiftp.NsdService$2 -> be.ppareit.swiftp.h:
    android.net.nsd.NsdServiceInfo val$serviceInfo -> a
    be.ppareit.swiftp.NsdService this$0 -> b
    void run() -> run
be.ppareit.swiftp.NsdService$StartStopReceiver -> be.ppareit.swiftp.NsdService$StartStopReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
be.ppareit.swiftp.RequestStartStopReceiver -> be.ppareit.swiftp.RequestStartStopReceiver:
    java.lang.String TAG -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void warnIfNoExternalStorage() -> a
be.ppareit.swiftp.Util -> be.ppareit.swiftp.i:
    java.lang.String TAG -> a
    byte byteOfInt(int,int) -> a
    java.net.InetAddress intToInet(int) -> a
    void sleepIgnoreInterupt(long) -> a
be.ppareit.swiftp.gui.FsNotification -> be.ppareit.swiftp.gui.FsNotification:
    java.lang.String TAG -> a
    int NOTIFICATIONID -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void setupNotification(android.content.Context) -> a
    void clearNotification(android.content.Context) -> b
be.ppareit.swiftp.gui.FsPreferenceActivity -> be.ppareit.swiftp.gui.FsPreferenceActivity:
    java.lang.String TAG -> b
    android.preference.EditTextPreference mPassWordPref -> c
    android.os.Handler mHandler -> d
    android.content.BroadcastReceiver mFsActionsReceiver -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
    void startServer() -> b
    void stopServer() -> c
    void updateLoginInfo() -> d
    void updateRunningState() -> e
    java.lang.String transformPassword(java.lang.String) -> a
    android.preference.Preference findPref(java.lang.CharSequence) -> a
    void access$000(be.ppareit.swiftp.gui.FsPreferenceActivity) -> a
    void access$100(be.ppareit.swiftp.gui.FsPreferenceActivity) -> b
    java.lang.String access$200() -> a
    void access$300(be.ppareit.swiftp.gui.FsPreferenceActivity) -> c
    android.os.Handler access$400(be.ppareit.swiftp.gui.FsPreferenceActivity) -> d
be.ppareit.swiftp.gui.FsPreferenceActivity$1 -> be.ppareit.swiftp.gui.a:
    be.ppareit.swiftp.gui.FsPreferenceActivity this$0 -> a
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
be.ppareit.swiftp.gui.FsPreferenceActivity$10 -> be.ppareit.swiftp.gui.b:
    be.ppareit.swiftp.gui.FsPreferenceActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
be.ppareit.swiftp.gui.FsPreferenceActivity$10$1 -> be.ppareit.swiftp.gui.c:
    android.preference.TwoStatePreference val$runningPref -> a
    be.ppareit.swiftp.gui.FsPreferenceActivity$10 this$1 -> b
    void run() -> run
be.ppareit.swiftp.gui.FsPreferenceActivity$10$2 -> be.ppareit.swiftp.gui.d:
    android.preference.TwoStatePreference val$runningPref -> a
    be.ppareit.swiftp.gui.FsPreferenceActivity$10 this$1 -> b
    void run() -> run
be.ppareit.swiftp.gui.FsPreferenceActivity$2 -> be.ppareit.swiftp.gui.e:
    be.ppareit.swiftp.gui.FsPreferenceActivity this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
be.ppareit.swiftp.gui.FsPreferenceActivity$3 -> be.ppareit.swiftp.gui.f:
    be.ppareit.swiftp.gui.FsPreferenceActivity this$0 -> a
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
be.ppareit.swiftp.gui.FsPreferenceActivity$4 -> be.ppareit.swiftp.gui.g:
    be.ppareit.swiftp.gui.FsPreferenceActivity this$0 -> a
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
be.ppareit.swiftp.gui.FsPreferenceActivity$5 -> be.ppareit.swiftp.gui.h:
    be.ppareit.swiftp.gui.FsPreferenceActivity this$0 -> a
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
be.ppareit.swiftp.gui.FsPreferenceActivity$6 -> be.ppareit.swiftp.gui.i:
    be.ppareit.swiftp.gui.FsPreferenceActivity this$0 -> a
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
be.ppareit.swiftp.gui.FsPreferenceActivity$7 -> be.ppareit.swiftp.gui.j:
    be.ppareit.swiftp.gui.FsPreferenceActivity this$0 -> a
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
be.ppareit.swiftp.gui.FsPreferenceActivity$8 -> be.ppareit.swiftp.gui.k:
    be.ppareit.swiftp.gui.FsPreferenceActivity this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
be.ppareit.swiftp.gui.FsPreferenceActivity$9 -> be.ppareit.swiftp.gui.l:
    be.ppareit.swiftp.gui.FsPreferenceActivity this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
be.ppareit.swiftp.gui.FsWidgetProvider -> be.ppareit.swiftp.gui.FsWidgetProvider:
    java.lang.String TAG -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
    java.lang.String access$000() -> a
be.ppareit.swiftp.gui.FsWidgetProvider$UpdateService -> be.ppareit.swiftp.gui.FsWidgetProvider$UpdateService:
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.os.IBinder onBind(android.content.Intent) -> onBind
be.ppareit.swiftp.server.Account -> be.ppareit.swiftp.a.a:
    java.lang.String mUserName -> a
    java.lang.String getUsername() -> a
    void setUsername(java.lang.String) -> a
be.ppareit.swiftp.server.CmdAPPE -> be.ppareit.swiftp.a.b:
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.CmdAbstractListing -> be.ppareit.swiftp.a.c:
    java.lang.String TAG -> d
    java.util.Comparator listingComparator -> a
    java.lang.String makeLsString(java.io.File) -> a
    java.lang.String listDirectory(java.lang.StringBuilder,java.io.File) -> a
    java.lang.String sendListing(java.lang.String) -> a
be.ppareit.swiftp.server.CmdAbstractListing$1 -> be.ppareit.swiftp.a.d:
    int compare(java.io.File,java.io.File) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
be.ppareit.swiftp.server.CmdAbstractStore -> be.ppareit.swiftp.a.e:
    void doStorOrAppe(java.lang.String,boolean) -> a
be.ppareit.swiftp.server.CmdAbstractStore$1 -> be.ppareit.swiftp.a.f:
    java.io.RandomAccessFile val$raf -> a
    be.ppareit.swiftp.server.CmdAbstractStore this$0 -> b
    void write(int) -> write
    void close() -> close
be.ppareit.swiftp.server.CmdCDUP -> be.ppareit.swiftp.a.g:
    java.lang.String TAG -> a
    void run() -> run
be.ppareit.swiftp.server.CmdCWD -> be.ppareit.swiftp.a.h:
    java.lang.String TAG -> d
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.CmdDELE -> be.ppareit.swiftp.a.i:
    java.lang.String TAG -> d
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.CmdFEAT -> be.ppareit.swiftp.a.j:
    java.lang.String TAG -> a
    void run() -> run
be.ppareit.swiftp.server.CmdLIST -> be.ppareit.swiftp.a.k:
    java.lang.String TAG -> d
    java.lang.String input -> e
    void run() -> run
    java.lang.String makeLsString(java.io.File) -> a
be.ppareit.swiftp.server.CmdMDTM -> be.ppareit.swiftp.a.l:
    java.lang.String TAG -> a
    java.lang.String mInput -> d
    void run() -> run
be.ppareit.swiftp.server.CmdMFMT -> be.ppareit.swiftp.a.m:
    java.lang.String TAG -> a
    java.lang.String mInput -> d
    void run() -> run
be.ppareit.swiftp.server.CmdMKD -> be.ppareit.swiftp.a.n:
    java.lang.String TAG -> d
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.CmdMap -> be.ppareit.swiftp.a.o:
    java.lang.Class cmdClass -> a
    java.lang.String name -> b
    java.lang.Class getCommand() -> a
    java.lang.String getName() -> b
be.ppareit.swiftp.server.CmdNLST -> be.ppareit.swiftp.a.p:
    java.lang.String TAG -> d
    java.lang.String input -> e
    void run() -> run
    java.lang.String makeLsString(java.io.File) -> a
be.ppareit.swiftp.server.CmdNOOP -> be.ppareit.swiftp.a.q:
    void run() -> run
be.ppareit.swiftp.server.CmdOPTS -> be.ppareit.swiftp.a.r:
    java.lang.String TAG -> a
    java.lang.String input -> d
    void run() -> run
be.ppareit.swiftp.server.CmdPASS -> be.ppareit.swiftp.a.s:
    java.lang.String TAG -> d
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.CmdPASV -> be.ppareit.swiftp.a.t:
    java.lang.String TAG -> a
    void run() -> run
be.ppareit.swiftp.server.CmdPORT -> be.ppareit.swiftp.a.u:
    java.lang.String TAG -> d
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.CmdPWD -> be.ppareit.swiftp.a.v:
    java.lang.String TAG -> a
    void run() -> run
be.ppareit.swiftp.server.CmdQUIT -> be.ppareit.swiftp.a.w:
    java.lang.String TAG -> a
    void run() -> run
be.ppareit.swiftp.server.CmdREST -> be.ppareit.swiftp.a.x:
    java.lang.String TAG -> d
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.CmdRETR -> be.ppareit.swiftp.a.y:
    java.lang.String TAG -> d
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.CmdRMD -> be.ppareit.swiftp.a.z:
    java.lang.String TAG -> d
    java.lang.String input -> a
    void run() -> run
    boolean recursiveDelete(java.io.File) -> a
be.ppareit.swiftp.server.CmdRNFR -> be.ppareit.swiftp.a.aa:
    java.lang.String TAG -> d
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.CmdRNTO -> be.ppareit.swiftp.a.ab:
    java.lang.String TAG -> d
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.CmdSITE -> be.ppareit.swiftp.a.ac:
    void run() -> run
be.ppareit.swiftp.server.CmdSIZE -> be.ppareit.swiftp.a.ad:
    java.lang.String TAG -> d
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.CmdSTOR -> be.ppareit.swiftp.a.ae:
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.CmdSYST -> be.ppareit.swiftp.a.af:
    java.lang.String TAG -> a
    void run() -> run
be.ppareit.swiftp.server.CmdTYPE -> be.ppareit.swiftp.a.ag:
    java.lang.String TAG -> d
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.CmdUSER -> be.ppareit.swiftp.a.ah:
    java.lang.String TAG -> d
    java.lang.String input -> a
    void run() -> run
be.ppareit.swiftp.server.FtpCmd -> be.ppareit.swiftp.a.ai:
    java.lang.String TAG -> a
    be.ppareit.swiftp.server.SessionThread sessionThread -> b
    be.ppareit.swiftp.server.CmdMap[] cmdClasses -> c
    java.lang.Class[] allowedCmdsWhileAnonymous -> d
    void run() -> run
    void dispatchCommand(be.ppareit.swiftp.server.SessionThread,java.lang.String) -> a
    java.lang.String getParameter(java.lang.String,boolean) -> b
    java.lang.String getParameter(java.lang.String) -> b
    java.io.File inputPathToChrootedFile(java.io.File,java.lang.String) -> a
    boolean violatesChroot(java.io.File) -> b
be.ppareit.swiftp.server.LocalDataSocket -> be.ppareit.swiftp.a.aj:
    java.lang.String TAG -> e
    java.net.ServerSocket server -> a
    java.net.InetAddress remoteAddr -> b
    int remotePort -> c
    boolean isPasvMode -> d
    void clearState() -> c
    int onPasv() -> a
    boolean onPort(java.net.InetAddress,int) -> a
    java.net.Socket onTransfer() -> b
    void reportTraffic(long) -> a
be.ppareit.swiftp.server.SessionThread -> be.ppareit.swiftp.a.ak:
    java.lang.String TAG -> q
    boolean shouldExit -> a
    java.net.Socket cmdSocket -> b
    java.nio.ByteBuffer buffer -> c
    boolean pasvMode -> d
    boolean binaryMode -> e
    be.ppareit.swiftp.server.Account account -> f
    boolean userAuthenticated -> g
    java.io.File workingDir -> h
    java.net.Socket dataSocket -> i
    java.io.File renameFrom -> j
    be.ppareit.swiftp.server.LocalDataSocket localDataSocket -> k
    java.io.OutputStream dataOutputStream -> l
    boolean sendWelcomeBanner -> r
    java.lang.String encoding -> m
    long offset -> n
    int authFails -> o
    int MAX_AUTH_FAILS -> p
    boolean sendViaDataSocket(java.lang.String) -> a
    boolean sendViaDataSocket(byte[],int) -> a
    boolean sendViaDataSocket(byte[],int,int) -> a
    int receiveFromDataSocket(byte[]) -> a
    int onPasv() -> a
    boolean onPort(java.net.InetAddress,int) -> a
    java.net.InetAddress getDataSocketPasvIp() -> b
    boolean startUsingDataSocket() -> c
    void quit() -> d
    void closeDataSocket() -> e
    void run() -> run
    void closeSocket() -> f
    void writeBytes(byte[]) -> b
    void writeString(java.lang.String) -> b
    boolean isBinaryMode() -> g
    void setBinaryMode(boolean) -> a
    boolean isAnonymouslyLoggedIn() -> h
    boolean isUserLoggedIn() -> i
    void authAttempt(boolean) -> b
    java.io.File getWorkingDir() -> j
    void setWorkingDir(java.io.File) -> a
    java.io.File getRenameFrom() -> k
    void setRenameFrom(java.io.File) -> b
    void setEncoding(java.lang.String) -> c
be.ppareit.swiftp.server.TcpListener -> be.ppareit.swiftp.a.al:
    java.lang.String TAG -> c
    java.net.ServerSocket listenSocket -> a
    be.ppareit.swiftp.FsService ftpServerService -> b
    void quit() -> a
    void run() -> run
com.niuteam.database.SmsHander -> com.niuteam.a.a:
    android.database.sqlite.SQLiteDatabase db -> a
    android.content.Context context -> b
    java.lang.String createSMSDatabase() -> a
    void insertSMSToDatabase() -> b
    java.lang.String backupSms() -> backupSms
    void migrateConversation(long,long,java.lang.StringBuilder) -> a
    java.lang.String fmtAddr(java.lang.String) -> a
com.niuteam.securememo.MainActivity -> com.niuteam.securememo.MainActivity:
    android.widget.EditText txt_input -> a
    android.widget.TextView txt_show -> b
    void onCreate(android.os.Bundle) -> onCreate
    void backupSms(android.view.View) -> backupSms
    void startFtp(android.view.View) -> startFtp
    void log(java.lang.String) -> a
